---
- name: Install dnsmasq and openresolv
  become: true
  become_user: root
  community.general.pacman:
    name:
      - dnsmasq
      - openresolv

- name: Make sure that systemd-resolvconf is not used
  become: true
  become_user: root
  community.general.pacman:
    name:
      - systemd-resolvconf
    state: absent

- name: Copy resolvconf.conf
  become: true
  become_user: root
  ansible.builtin.copy:
    src: resolvconf.conf
    dest: /etc/resolvconf.conf
    mode: 0644
  register: resolvconf_conf_copy

- name: Update subscribers
  become: true
  become_user: root
  ansible.builtin.command: resolvconf -u
  when: resolvconf_conf_copy.changed  # noqa: no-handler
  changed_when: true

- name: Configure dnsmasq
  become: true
  become_user: root
  ansible.builtin.lineinfile:
    dest: /etc/dnsmasq.conf
    state: "present"
    regexp: "^{{ item.match }}"
    insertafter: "^#{{ item.match }}"
    line: "{{ item.line }}"
    # TODO: validation requires %s and dnsmasq doesn't need and like it
    # validate: dnsmasq --test
  with_items:
    - {match: "listen-address=", line: "listen-address=::1,127.0.0.1"}
    - {match: "cache-size=", line: "cache-size=1000"}
    - {match: "bind-interfaces", line: "bind-interfaces"}
    # Only listen on localhost, we don't serve other machines in the network
    - {match: "interface=", line: "interface="}
    - {match: "conf-file=", line: "conf-file=/etc/dnsmasq-conf.conf"}
    - {match: "resolv-file=", line: "resolv-file=/etc/dnsmasq-resolv.conf"}
  register: dnsmasq_configure

- name: Obtain service facts, to check if systemd-resolved exists
  ansible.builtin.service_facts:

- name: Make sure that systemd-resolved is not running
  become: true
  become_user: root
  ansible.builtin.systemd:
    name: systemd-resolved.service
    enabled: false
    state: stopped
  when: '"systemd-resolved.service" in services'

- name: Start and enable dnsmasq
  become: true
  become_user: root
  ansible.builtin.systemd:
    name: dnsmasq.service
    enabled: true
    state: "{{ (dnsmasq_configure.changed or resolvconf_conf_copy.changed) | ternary('restarted', 'started') }}"

- name: Make network manager use the resolvconf
  become: true
  become_user: root
  ansible.builtin.template:
    src: nm-rc-manager.conf
    dest: /etc/NetworkManager/conf.d/rc-manager.conf
    mode: 0644
  register: network_manager_resolvconf

- name: Reload network manager
  become: true
  become_user: root
  ansible.builtin.systemd:
    name: NetworkManager.service
    state: reloaded
  when: network_manager_resolvconf.changed  # noqa: no-handler
