;; PACKAGES

; Bootstrap straight.el
; Repo has to be already cloned in the correct dir
(defvar bootstrap-version)
(let ((bootstrap-file
               (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
    (load bootstrap-file nil 'nomessage))

; Needed for Emacs >= 25
(setq package-enable-at-startup nil)

(setq straight-use-package-by-default t)

(straight-use-package 'use-package)

; Install all the base packages (specific installations are done later on in appropriate sections)
(straight-use-package 'flycheck)
(straight-use-package 'flymd)
(straight-use-package 'ycmd)
(straight-use-package 'company-ycmd)
(straight-use-package 'company-quickhelp)

;; GENERAL

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
)

(custom-set-variables
  '(inhibit-startup-screen t)
)

;; insert spaces when <Tab> is entered
(setq-default indent-tabs-mode nil)

;; set tab to 4 spaces
(setq-default tab-width 4)

;; wrap lines
(global-visual-line-mode t)

;; disable bell on every freakin action
(setq ring-bell-function 'ignore)

;; display line numbers
(global-display-line-numbers-mode)

;; UTF-8 as default encoding
(set-language-environment "UTF-8")

;; display matching parentheses
(show-paren-mode t)

;; pop up with documentation
(company-quickhelp-mode)

;; ViM ALIKE
;; Evil

;; ViM like mode
;; use undo-redo based on emacs 28 definitions
(setq evil-undo-system 'undo-redo)

;; Startup
(use-package evil)
(evil-mode 1)

;; vim magit binds
;;(require 'evil-magit)

;; vim tutor
(use-package evil-tutor)

;; vim binds for org-mode
(use-package evil-org)

;; Powerline look compliant with evil
(use-package powerline)
(powerline-center-evil-theme)

;; more vim-like scrolling
(use-package smooth-scrolling)
(smooth-scrolling-mode 1)
(setq smooth-scroll-margin 5)

;; remember position in file after exit
(setq save-place-file "~/.emacs.d/saveplace")
(save-place-mode 1)

;; YCMD and company-ycmd
;;(require 'ycmd)
;;(add-hook 'after-init-hook #'global-ycmd-mode)
;;(set-variable 'ycmd-server-command `("python" ,(file-truename "~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/")))
;;(set-variable 'ycmd-global-config (file-truename "~/.ycm_extra_conf.py"))
;;
;;(require 'company)
;;(require 'company-ycmd)
;;(add-hook 'ycmd-mode-hook 'company-ycmd-setup)

(use-package company
  :hook (prog-mode . company-mode)
  :config (setq company-tooltip-align-annotations t)
  (setq company-minimum-prefix-length 1))

(use-package lsp-mode
  :hook (
         (rust-mode . lsp)
         )
  :commands lsp)

(use-package lsp-ui)

(use-package company-lsp)

;; Apply it everywhere.
(global-company-mode)
;;(global-ycmd-mode)

;; AESTEHTICS
;; Hide UI
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

;; Zenburn theme
(use-package zenburn-theme)
(load-theme 'zenburn t)

;; Line numbering
(setq global-linum-mode t)

;; Complete common part on TAB press.
(eval-after-load 'company
  '(progn
     (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
     (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))

;; FLYCHECK
;; Enable flycheck globally.
(add-hook 'after-init-hook #'global-flycheck-mode)

;;    (setq flycheck-check-syntax-automatically '(mode-enabled save))

;; Running mypy together with pylint using flycheck.
;;  (add-to-list 'flycheck-checkers 'python-flake8 t)
;;(add-to-list 'flycheck-checkers 'python-mypy t)
;(flycheck-add-next-checker 'python-flake8 'python-mypy)

;; PYTHON
;; color column
(use-package fill-column-indicator)
(use-package flycheck-mypy)
(add-hook 'python-mode-hook (lambda ()
                              ;; Draw dark red line on column 79.
                              (set-fill-column 79)
                              (setq fci-rule-color "darkred")
                              (fci-mode 1)
                              ;; Select mypy as default flycheck checker.
                              (flycheck-select-checker 'python-mypy)
                              ))

(add-hook 'python-mode-hook-lsp #'lsp)

;; GO
;; general mode for Go
(use-package go-mode)
(use-package go-guru)
(use-package gotest)
(add-hook 'go-mode-hook (lambda ()
                          ;; run goimports instead of fmt.
                          (setq gofmt-command "goimports")

                          ;; documentation read
                          (local-set-key (kbd "C-c C-k") 'godoc)
                          ;; automatically run goimports on file save.
                          (add-hook 'before-save-hook 'gofmt-before-save)

                          ;; Customize compile command to run go build
                          (if (not (string-match "go" compile-command))
                              (set (make-local-variable 'compile-command)
                                   "go build -v && go test -v && go vet"))

                          (setq company-tooltip-limit 20)
                          (setq company-idle-delay .3)
                          (setq company-echo-delay 0)
                          (setq company-begin-commands '(self-insert-command))

                          ;; flycheck go tool vet solution
                          (let ((govet (flycheck-checker-get 'go-vet 'command)))
                            (when (equal (cadr govet) "tool")
                              (setf (cdr govet) (cddr govet))))
                          ))
;; JULIA
;; add julia-mode and REPL
(use-package julia-mode)
(use-package julia-repl)
(use-package flycheck-julia)

;; HASKELL
(use-package haskell-mode)

;; JS/JSX/TS
(add-to-list 'auto-mode-alist '("\\.js\\'" . js-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . js-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-jsx-mode))

;; YAML
;; Automatically use for common file types
(use-package yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))

;; Automatically indent when newline is issued
(add-hook 'yaml-mode-hook
          (lambda ()
	    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;; RUST
(use-package rust-mode)
(use-package flycheck-rust)
(add-hook 'rust-mode-hook-lsp #'lsp)

(add-hook 'rust-mode-hook (lambda ()
                            ;; Automatically format on buffer save
                            (setq rust-format-on-save t)
                            ;; Properly understand cargo layout for flycheck.
                            (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
                            ))


;; PACKAGES (kind of posthook)
; Write the lockfile
(straight-freeze-versions)
