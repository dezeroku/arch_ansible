$script = <<-SCRIPT
# This is reaaaally stupid,
# but hey, it works
sudo sed -i 's#nameserver.*#nameserver 1.1.1.1##' /etc/resolv.conf
{% if pacoloco_setup_client %}
echo 'Server = {{ pacoloco_server_url }}/repo/{{ pacoloco_repo }}/$repo/os/$arch' | sudo tee /etc/pacman.d/mirrorlist
{% endif %}
pacman -Syu ansible --noconfirm
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = 'archlinux/archlinux'
  if Vagrant.has_plugin?("vagrant-disksize")
    config.disksize.size = '50GB'
  end

  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
    v.cpus = 4
  end

  config.vm.provider "libvirt" do |v|
    v.memory = 4096
    v.cpus = 4
  end

  # Pass the ansible stuff
  # Side note: it seems that libvirt provider only rsyncs the files on machine startup,
  # so you're going to need the halt and up approach to refresh the changes
  config.vm.synced_folder "~/arch_ansible/", "/arch_ansible"

  # Install ansible and run pacman -Syu
  config.vm.provision "shell", inline: $script

  # Perform reboot to load (possibly) new kernel
  config.vm.provision 'shell', reboot: true

  # Perform Ansible provisioning
  config.vm.provision "ansible_local" do |ansible|
    ansible.install = false
    ansible.playbook = "site.yml"
    ansible.inventory_path = "base.yaml"
    ansible.provisioning_path = "/arch_ansible"
    ansible.galaxy_role_file = "requirements.yml"
    ansible.galaxy_roles_path = "/etc/ansible/roles"
    ansible.galaxy_command = "true"
    ansible.playbook_command = "CI_RUN_MODE=true ./install-common-groups && \#"
  end
end
